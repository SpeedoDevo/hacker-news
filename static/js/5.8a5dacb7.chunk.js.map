{"version":3,"sources":["Header/Settings/OptionList/OptionList.tsx","Header/Settings/Dialog/Dialog.tsx"],"names":["OptionList","title","optionTranslations","onSelected","isSelected","options","Object","keys","react_default","a","createElement","index_es","subheader","map","option","key","button","onClick","checked","tabIndex","disableRipple","ResponsiveDialog","withMobileDialog","MuiDialog","withSettingsNamespace","withNamespaces","LanguageSettings","_ref","t","languages","returnObjects","LanguageProvider","Consumer","context","language","setLanguage","selectedLanguage","ThemeSettings","_ref2","themes","ThemeProvider","theme","setTheme","selectedTheme","Dialog","_this$props","this","props","open","toggle","classes","onClose","className","dialogContent","Component","withStyles","padding"],"mappings":"mMASO,SAASA,EACdC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAiBC,OAAOC,KAAKL,GAEnC,OACEM,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAWJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAgBV,IAC9BI,EAAQQ,IACP,SAACC,GAAD,OACEN,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUI,IAAKD,EAAQE,QAAM,EAACC,QAASd,EAAWW,IAChDN,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOO,QAASd,EAAWU,GAASK,UAAW,EAAGC,eAAa,IAC/DZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAeT,EAAmBY,QCA9C,IAAMO,EAAkDC,cAEpDC,KAEEC,EAA2DC,YAC/D,YAGIC,EAAkCF,EACtC,SAAAG,GAA6C,IAA1CC,EAA0CD,EAA1CC,EACKC,EAA4CD,EAAE,YAAa,CAC/DE,eAAe,IAGjB,OACEtB,EAAAC,EAAAC,cAACqB,EAAA,EAAgBC,SAAjB,KACG,SAACC,GAAD,OACCjC,EACE4B,EAAE,YACFC,EACA,SAACK,GAAD,OAAsB,kBAAYD,EAAQE,YAAYD,KACtD,SAACA,GAAD,OAAsBD,EAAQG,mBAAqBF,QAOzDG,EAA+Bb,EACnC,SAAAc,GAA6C,IAA1CV,EAA0CU,EAA1CV,EACKW,EAAgDX,EAAE,SAAU,CAChEE,eAAe,IAGjB,OACEtB,EAAAC,EAAAC,cAAC8B,EAAA,EAAaR,SAAd,KACG,SAACC,GAAD,OACCjC,EACE4B,EAAE,SACFW,EACA,SAACE,GAAD,OAAwB,kBAAYR,EAAQS,SAASD,KACrD,SAACA,GAAD,OAAwBR,EAAQU,gBAAkBF,QAiBxDG,mLACuB,IAAAC,EAC2BC,KAAKC,MAAjDC,EADiBH,EACjBG,KAAMC,EADWJ,EACXI,OAAQC,EADGL,EACHK,QAAStB,EADNiB,EACMjB,EAE/B,OACEpB,EAAAC,EAAAC,cAACW,EAAD,CAAkB2B,KAAMA,EAAMG,QAASF,GACrCzC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAciB,EAAE,aAChBpB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAeyC,UAAWF,EAAQG,eAChC7C,EAAAC,EAAAC,cAACgB,EAAD,MACAlB,EAAAC,EAAAC,cAAC2B,EAAD,OAEF7B,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQM,QAASgC,GAASrB,EAAE,0BAZjB0B,aAmBN9B,YAAsB+B,qBAvBV,CACzBF,cAAe,CAAEG,QAAS,IAsBSD,CAAmBX","file":"static/js/5.8a5dacb7.chunk.js","sourcesContent":["import {\n  List,\n  ListItem,\n  ListItemText,\n  ListSubheader,\n  Radio,\n} from '@material-ui/core'\nimport React, { ReactElement, ReactNode } from 'react'\n\nexport function OptionList<Key extends string | number = string>(\n  title: string,\n  optionTranslations: { [k in Key]: string },\n  onSelected: (option: Key) => () => void,\n  isSelected: (option: Key) => boolean,\n): ReactElement<{}> {\n  const options: Key[] = Object.keys(optionTranslations) as Key[]\n\n  return (\n    <List subheader={<ListSubheader>{title}</ListSubheader>}>\n      {options.map(\n        (option: Key): ReactNode => (\n          <ListItem key={option} button onClick={onSelected(option)}>\n            <Radio checked={isSelected(option)} tabIndex={-1} disableRipple />\n            <ListItemText>{optionTranslations[option]}</ListItemText>\n          </ListItem>\n        ),\n      )}\n    </List>\n  )\n}\n","import {\n  Button,\n  Dialog as MuiDialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  PaletteType,\n  withMobileDialog,\n} from '@material-ui/core'\nimport { DialogProps as MuiDialogProps } from '@material-ui/core/Dialog'\nimport { StyleRules, WithStyles, withStyles } from '@material-ui/core/styles'\nimport React, { Component, ComponentType, ReactElement, ReactNode } from 'react'\nimport { withNamespaces, WithNamespaces } from 'react-i18next'\nimport {\n  LanguageContext,\n  LanguageContextType,\n} from '../../../Root/LanguageProvider/LanguageProvider'\nimport {\n  ThemeContext,\n  ThemeContextType,\n} from '../../../Root/ThemeProvider/ThemeProvider'\nimport { OptionList } from '../OptionList/OptionList'\n\nconst ResponsiveDialog: ComponentType<MuiDialogProps> = withMobileDialog<\n  MuiDialogProps\n>()(MuiDialog)\n\nconst withSettingsNamespace: ReturnType<typeof withNamespaces> = withNamespaces(\n  'Settings',\n)\n\nconst LanguageSettings: ComponentType = withSettingsNamespace(\n  ({ t }: WithNamespaces): ReactElement<{}> => {\n    const languages: { [language: string]: string } = t('languages', {\n      returnObjects: true,\n    })\n\n    return (\n      <LanguageContext.Consumer>\n        {(context: LanguageContextType): ReactNode =>\n          OptionList(\n            t('language'),\n            languages,\n            (language: string) => (): void => context.setLanguage(language),\n            (language: string) => context.selectedLanguage === language,\n          )\n        }\n      </LanguageContext.Consumer>\n    )\n  },\n)\nconst ThemeSettings: ComponentType = withSettingsNamespace(\n  ({ t }: WithNamespaces): ReactElement<{}> => {\n    const themes: { [language in PaletteType]: string } = t('themes', {\n      returnObjects: true,\n    })\n\n    return (\n      <ThemeContext.Consumer>\n        {(context: ThemeContextType): ReactNode =>\n          OptionList(\n            t('theme'),\n            themes,\n            (theme: PaletteType) => (): void => context.setTheme(theme),\n            (theme: PaletteType) => context.selectedTheme === theme,\n          )\n        }\n      </ThemeContext.Consumer>\n    )\n  },\n)\n\ninterface DialogProps {\n  open: boolean\n  toggle(): void\n}\n\nconst styles: StyleRules = {\n  dialogContent: { padding: 0 },\n}\n\nclass Dialog extends Component<DialogProps & WithStyles & WithNamespaces> {\n  public render(): ReactNode {\n    const { open, toggle, classes, t }: this['props'] = this.props\n\n    return (\n      <ResponsiveDialog open={open} onClose={toggle}>\n        <DialogTitle>{t('settings')}</DialogTitle>\n        <DialogContent className={classes.dialogContent}>\n          <LanguageSettings />\n          <ThemeSettings />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={toggle}>{t('shared:close')}</Button>\n        </DialogActions>\n      </ResponsiveDialog>\n    )\n  }\n}\n\nexport default withSettingsNamespace(withStyles(styles)(Dialog))\n"],"sourceRoot":""}