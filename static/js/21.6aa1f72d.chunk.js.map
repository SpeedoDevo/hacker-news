{"version":3,"sources":["api/rx.ts","User/Submissions/Submissions.tsx"],"names":["getApi$","path","Observable","subscriber","withUnsubscriber","snap","next","val","filterFeed$","feed$","predicate","limit","arguments","length","undefined","Infinity","pipe","map","items","id","concat","getItem$","item$s","item$$","from","flatMap","_ref","round","Math","sqrt","parallel","clamp","lastFiltered","item$","first","EMPTY","filter","item","index","take","toArray","left","Submissions","Bind","state","loading","this","_subscribe","prevProps","reload","props","amount","_unsubscribe","setState","react_default","a","createElement","Fragment","_renderEmptyPlaceholder","_renderComments","_renderSubmissions","index_es","_renderPager","_this$state","_this$props","t","EmptyPlaceHolder","message","context","Headline","expanded","key","container","spacing","justify","onClick","_more","_this$props2","history","push","SubmissionsRoute","makeURL","_getAmount","dead","deleted","type","by","_this2","_subscription","_predicate","subscribe","_ref2","unsubscribe","Component","withNamespaces","withRouter"],"mappings":"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","file":"static/js/21.6aa1f72d.chunk.js","sourcesContent":["import { EMPTY, from, Observable, Subscriber, TeardownLogic } from 'rxjs'\nimport { filter, first, flatMap, map, take, toArray } from 'rxjs/operators'\nimport { Optional } from '../types'\nimport { clamp } from '../util'\nimport { withUnsubscriber } from './'\nimport { Item, ItemId, Items, Snapshot, UserId } from './types'\n\nfunction getApi$<T>(path: string): Observable<Optional<T>> {\n  return new Observable(\n    (subscriber: Subscriber<Optional<T>>): TeardownLogic => {\n      return withUnsubscriber(path, (snap: Snapshot<T>) => {\n        subscriber.next(snap.val())\n      })\n    },\n  )\n}\n\nexport function getItem$(id: ItemId): Observable<Optional<Item>> {\n  return getApi$(`item/${id}`)\n}\n\nexport function getUserSubmissions$(id: UserId): Observable<Optional<Items>> {\n  return getApi$(`user/${id}/submitted`)\n}\n\ninterface WithLeft {\n  left: number\n  items: Item[]\n}\n\nexport function filterFeed$(\n  feed$: Observable<Optional<Items>>,\n  predicate: (item: Item) => boolean,\n  limit: number = Infinity,\n): Observable<WithLeft> {\n  interface WithLength {\n    length: number\n    item$$: Observable<Observable<Optional<Item>>>\n  }\n\n  return feed$.pipe(\n    map((items: Optional<Items>) =>\n      items ? items.map((id: ItemId) => getItem$(id)) : [],\n    ),\n    map(\n      (item$s: Array<Observable<Optional<Item>>>): WithLength => ({\n        length: item$s.length,\n        item$$: from(item$s),\n      }),\n    ),\n    flatMap(({ length, item$$ }: WithLength) => {\n      const { round, sqrt }: typeof Math = Math\n      const parallel: number = clamp(round(sqrt(length)), 1, limit)\n      let lastFiltered: number = 0\n\n      return item$$.pipe(\n        flatMap(\n          (item$: Observable<Optional<Item>>) =>\n            item$ ? item$.pipe(first()) : EMPTY,\n          parallel,\n        ),\n        filter(\n          (item: Optional<Item>, index: number): item is Item => {\n            lastFiltered = index\n            return !!item && predicate(item)\n          },\n        ),\n        take(limit),\n        toArray(),\n        map(\n          (items: Item[]): WithLeft => ({\n            items,\n            left: length - lastFiltered - 1,\n          }),\n        ),\n      )\n    }),\n  )\n}\n","import { Button, Grid, LinearProgress } from '@material-ui/core'\nimport { Bind } from 'lodash-decorators'\nimport React, { Component, ReactNode } from 'react'\nimport { withNamespaces, WithNamespaces } from 'react-i18next'\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\nimport { Subscription } from 'rxjs'\nimport { filterFeed$, getUserSubmissions$ } from '../../api/rx'\nimport { Item, UserId } from '../../api/types'\nimport EmptyPlaceHolder from '../../EmptyPlaceholder/EmptyPlaceHolder'\nimport Headline from '../../Headline/Headline'\nimport SubmissionsRoute, {\n  Filter,\n} from '../../routes/UserRoute/SubmissionsRoute/SubmissionsRoute'\n\ninterface SubmissionsProps {\n  id: UserId\n  filter: Filter\n  amount?: number\n}\n\ninterface SubmissionsState {\n  items: Item[]\n  left: number\n  loading: boolean\n}\n\nconst PAGE_SIZE: number = 30\n\nclass Submissions extends Component<\n  SubmissionsProps & RouteComponentProps & WithNamespaces,\n  SubmissionsState\n> {\n  public state: SubmissionsState = { items: [], left: 0, loading: true }\n  private _subscription?: Subscription\n\n  public componentDidMount(): void {\n    this._subscribe()\n  }\n\n  public componentDidUpdate(prevProps: SubmissionsProps): void {\n    const reload: boolean =\n      this.props.id !== prevProps.id || this.props.filter !== prevProps.filter\n    if (reload || this.props.amount !== prevProps.amount) {\n      this._unsubscribe()\n      this._subscribe()\n      this.setState({ loading: true })\n    }\n\n    if (reload) {\n      this.setState({ items: [], left: 0 })\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._unsubscribe()\n  }\n\n  public render(): ReactNode {\n    return (\n      <>\n        {this._renderEmptyPlaceholder()}\n        {this.props.filter === 'comments'\n          ? this._renderComments()\n          : this._renderSubmissions()}\n        {this.state.loading ? <LinearProgress /> : null}\n        {this._renderPager()}\n      </>\n    )\n  }\n\n  private _renderEmptyPlaceholder(): ReactNode {\n    const { loading, items }: this['state'] = this.state\n    const { t, filter }: this['props'] = this.props\n\n    return loading || items.length ? null : (\n      <EmptyPlaceHolder message={t('empty', { context: filter })} />\n    )\n  }\n\n  private _renderComments(): ReactNode {\n    return this.state.items.map((item: Item) => (\n      <Headline item={item} expanded key={item.id} />\n    ))\n  }\n\n  private _renderSubmissions(): ReactNode {\n    return this.state.items.map((item: Item) => (\n      <Headline item={item} key={item.id} />\n    ))\n  }\n\n  private _renderPager(): ReactNode {\n    return this.state.left ? (\n      <Grid container spacing={8} justify=\"center\">\n        <Grid item>\n          <Button onClick={this._more}>{this.props.t('more')}</Button>\n        </Grid>\n      </Grid>\n    ) : null\n  }\n\n  @Bind()\n  private _more(): void {\n    const { id, filter }: this['props'] = this.props\n\n    this.props.history.push(\n      SubmissionsRoute.makeURL({\n        filter,\n        id,\n        amount: this._getAmount() + PAGE_SIZE,\n      }),\n    )\n  }\n\n  private _getAmount(): number {\n    return this.props.amount || PAGE_SIZE\n  }\n\n  @Bind()\n  private _predicate({ dead, deleted, type, by }: Item): boolean {\n    if (dead || deleted || !by) return false\n\n    switch (this.props.filter) {\n      case 'comments':\n        return type === 'comment'\n      case 'submissions':\n        return type !== 'comment' && type !== 'pollopt'\n    }\n  }\n\n  private _subscribe(): void {\n    this._subscription = filterFeed$(\n      getUserSubmissions$(this.props.id),\n      this._predicate,\n      this._getAmount(),\n    ).subscribe(({ items, left }: { items: Item[]; left: number }) => {\n      this.setState({ items, left, loading: false })\n    })\n  }\n\n  private _unsubscribe(): void {\n    if (this._subscription) {\n      this._subscription.unsubscribe()\n    }\n  }\n}\n\nexport default withNamespaces('Submissions')(withRouter(Submissions))\n"],"sourceRoot":""}